{
  "version": "3",
  "templates": [
    {
      "type": 1,
      "title": "Watchtower",
      "description": "Automatically update running Docker containers",
      "categories": [
        "docker"
      ],
      "platform": "linux",
      "logo": "https://github.com/containrrr/watchtower/blob/v1.0.0/gopher-watchtower.png?raw=true",
      "image": "containrrr/watchtower",
      "volumes": [
        {
          "container": "/var/run/docker.sock",
          "bind": "/var/run/docker.sock",
          "readonly": true
        }
      ]
    },
    {
      "type": 3,
      "title": "Autobrr",
      "description": "Automatically download torrents from RSS feeds",
      "note": "Deploys an Autobrr container.",
      "categories": [
        "downloads"
      ],
      "platform": "linux",
      "logo": "https://autobrr.com/img/logo.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Autobrr/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "AUTOBRR_CONFIG",
          "label": "Host path for storing Autobrr configuration",
          "default": "/var/lib/autobrr/config"
        }
      ]
    },
    {
      "type": 3,
      "title": "Immich",
      "description": "Immich is a simple and lightweight image hosting service",
      "note": "Deploys an Immich instance.",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://play-lh.googleusercontent.com/nJsRIdtaot1-FKH3kiRem4kjqUU1-_0hd_64qZH0BgtzUecYfWLCDfpk2nNVul8hOrw",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Immich/docker-stack.yml"
      },
      "env": [
        {
          "name": "PATH_TO_PHOTOS",
          "label": "Host path to mount as photo library into the container",
          "default": "/var/lib/immich/photos"
        },
        {
          "name": "PATH_TO_EXT_LIB",
          "label": "Host path for importing photos from external library",
          "default": "/var/lib/immich/ext_lib"
        }
      ]
    },
    {
      "type": 3,
      "title": "Kometa",
      "description": "Kometa formerly known as Plex Meta Manager is a tool to manage your Plex library metadata.",
      "note": "Deploys Kometa",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://kometa.wiki/en/nightly/assets/logo-full.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Kometa/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "KOMETA_CONFIG",
          "label": "Host path for storing Kometa configuration",
          "default": "/var/lib/kometa/config"
        },
        {
          "name": "KOMETA_TIME",
          "label": "Time of the day to run Kometa (HH:MM) Default: 03:00",
          "default": "03:00"
        },
        {
          "name": "KOMETA_RUN",
          "label": "Run the script on startup Default: False",
          "default": "False"
        }
      ]
    },
    {
      "type": 3,
      "title": "Nginx Proxy Manager",
      "description": "Nginx Proxy Manager is a reverse proxy management system that is based on Nginx.",
      "note": "Deploys NPM",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://nginxproxymanager.com/logo.svg",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/NPM/docker-stack.yml"
      },
      "env": [
        {
          "name": "PATH_TO_DATA",
          "label": "Host path for storing NPM configuration and data",
          "default": "/var/lib/npm/data"
        },
        {
          "name": "PATH_TO_LETSENCRYPT",
          "label": "Host path for storing HTTPS certificates",
          "default": "/var/lib/npm/letsencrypt"
        }
      ]
    },
    {
      "type": 3,
      "title": "Paperless NGX",
      "description": "Paperless-ngx is a document management system that transforms your physical documents into a searchable online archive so you can keep, well, less paper.",
      "note": "Deploys Paperless NGX",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://play-lh.googleusercontent.com/NF0cFPaWCf57S1-dvh4ZNP2WPIKSXKYIvZq6NWUtnP0U3DhfLOPdwgjd5SzC9JLebg",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Paperless-ngx/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "PATH_TO_MEDIA_DIR",
          "label": "Host path for storing Paperless NGX configuration and data",
          "default": "/var/lib/paperless-ngx/data"
        },
        {
          "name": "PATH_TO_EXPORT_DIR",
          "label": "Host path for storing exported documents from Paperless NGX",
          "default": "/var/lib/paperless-ngx/export"
        },
        {
          "name": "PATH_TO_CONSUME_DIR",
          "label": "Host path for importing documents into Paperless NGX",
          "default": "/var/lib/paperless-ngx/consume"
        },
        {
          "name": "OCR_LANGUAGE",
          "label": "Default language for OCR Default: ita",
          "default": "ita"
        }
      ]
    },
    {
      "type": 3,
      "title": "Pihole",
      "description": "Pi-hole is a Linux network-level advertisement and Internet tracker blocking application which acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network.",
      "note": "Deploys Pihole and Unbound",
      "categories": [
        "infra"
      ],
      "platform": "linux",
      "logo": "https://upload.wikimedia.org/wikipedia/commons/8/88/Pi-hole_Logo_2.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Pihole/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "ADMIN_PASSWORD",
          "label": "Web password for Pihole. Default: admin",
          "default": "admin"
        },
        {
          "name": "LISTEN_IP",
          "label": "IP to listen on. Default: 127.0.0.1",
          "default": "127.0.0.1"
        },
        {
          "name": "EXTERNAL_DNS_SERVER",
          "label": "External DNS server to use during startup. Default: 8.8.8.8",
          "default": "8.8.8.8"
        },
        {
          "name": "PATH_TO_UNBOUND_CONF_FILE",
          "label": "Host path where Unbound configuration file is stored",
          "default": "/var/lib/unbound/unbound.conf"
        }
      ]
    },
    {
      "type": 3,
      "title": "Plex",
      "description": "Plex is a client-server media player system and software suite comprising two main components. The Plex Media Server desktop application runs on Windows, macOS, and Linux-compatibles including some types of NAS devices.",
      "note": "Deploys Plex Media Server",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Plex_logo_2022.svg/2560px-Plex_logo_2022.svg.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Plex/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "PLEX_CLAIM",
          "label": "Plex Claim Token",
          "default": ""
        },
        {
          "name": "PATH_TO_TV_FOLDER",
          "label": "Host path to TV Shows folder",
          "default": "/var/lib/plex/tv"
        },
        {
          "name": "PATH_TO_MOVIES_FOLDER",
          "label": "Host path to Movies folder",
          "default": "/var/lib/plex/movies"
        }
      ]
    },
    {
      "type": 3,
      "title": "qBittorrent",
      "description": "qBittorrent is a free and open-source BitTorrent client that aims to be a good alternative to ÂµTorrent.",
      "note": "Deploys qBittorrent",
      "categories": [
        "downloads"
      ],
      "platform": "linux",
      "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/New_qBittorrent_Logo.svg/1200px-New_qBittorrent_Logo.svg.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/qBittorrent/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "PATH_TO_DOWNLOADS",
          "label": "Host path to store downloaded files",
          "default": "/var/lib/qbittorrent/downloads"
        },
        {
          "name": "PATH_TO_CONFIG",
          "label": "Host path to store torrent files",
          "default": "/var/lib/qbittorrent/config"
        },
        {
          "name": "WEBUI_PORT",
          "label": "Port for the qBittorrent web interface",
          "default": "8080"
        },
        {
          "name": "TORRENTING_PORT",
          "label": "Port for the qBittorrent torrenting service",
          "default": "6881"
        }
      ]
    },
    {
      "type": 3,
      "title": "Servarr",
      "description": "Servarr is a collection of services for managing your media collection.",
      "note": "Deploys Radarr, Sonarr, Prowlarr, Bazarr, Maintainerr, Recyclarr and FlareSolverr.",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://github.com/Servarr/Wiki/raw/master/assets/servarr/servarr_dark_1024.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Servarr/docker-stack.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "PATH_TO_MOVIES",
          "label": "Host path to Radarr movies",
          "default": "/var/lib/radarr/movies"
        },
        {
          "name": "PATH_TO_TV",
          "label": "Host path to Sonarr TV shows",
          "default": "/var/lib/sonarr/tv"
        },
        {
          "name": "PATH_TO_DOWNLOADS",
          "label": "Host path where bittorrent downloads are stored",
          "default": "/var/lib/qbittorrent/downloads"
        }
      ]
    },
    {
      "type": 3,
      "title": "TeslaMate",
      "description": "TeslaMate is a self-hosted data logger for your Tesla vehicle.",
      "note": "Deploys the complete Teslamate stack.",
      "categories": [
        "observability"
      ],
      "platform": "linux",
      "logo": "https://docs.teslamate.org/img/logo.svg",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Teslamate/docker-stack.yml"
      },
      "env": [
        {
          "name": "ENCRYPTION_KEY",
          "label": "Encryption key to encrypt Tesla API token",
          "default": "changeme"
        }
      ]
    },
    {
      "type": 3,
      "title": "TOR Relay",
      "description": "TOR is a free software for enabling anonymous communication. The name is derived from an acronym for the original software project name \"The Onion Router\".",
      "note": "Deploys a Tor Relay with OBFS4 protocol.",
      "categories": [
        "infra"
      ],
      "platform": "linux",
      "logo": "https://w7.pngwing.com/pngs/173/966/png-transparent-purple-onion-tor-browser-web-browser-onion-onion-routing-onion-food-leaf-plant-stem.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Tor-obfs4-bridge/docker-stack.yml"
      },
      "env": [
        {
          "name": "NICKNAME",
          "label": "Nickname for the Tor relay",
          "default": "myrelay"
        },
        {
          "name": "EMAIL",
          "label": "Contact information for the Tor relay operator",
          "default": "changeme@example.com"
        },
        {
          "name": "OR_PORT",
          "label": "Port for the Onion Router",
          "default": "8080"
        },
        {
          "name": "PT_PORT",
          "label": "Port for the Pluggable Transport proxy",
          "default": "9090"
        }
      ]
    },
    {
      "type": 3,
      "title": "Tdarr Server Node (GPU Transcoding)",
      "description": "Tdarr is a popular conditional transcoding application for processing large (or small) media libraries. The application comes in the form of a click-to-run web-app, which you run on your own device and access through a web browser.",
      "note": "Deploys a Tdarr server with GPU transcoding support.",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://docs.tdarr.io/img/favicon.ico",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Tdarr/docker-stack-server-gpu_node.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "SERVER_IP",
          "label": "IP address of the Tdarr server",
          "default": "127.0.0.1"
        },
        {
          "name": "NODE_NAME",
          "label": "Name of this Tdarr node",
          "default": "tdarrNode"
        },
        {
          "name": "LIBRARY_PATH",
          "label": "Host path to media library",
          "default": "/var/lib/tdarr/library"
        },
        {
          "name": "TRANSCODE_CACHE_PATH",
          "label": "Host path for storing transcoding cache, this must be accessible by all Tdarr nodes and the Tdarr server.",
          "default": "/var/lib/tdarr/transcode_cache"
        }
      ]
    },
    {
      "type": 3,
      "title": "Tdarr Server Node (CPU Transcoding)",
      "description": "Tdarr is a popular conditional transcoding application for processing large (or small) media libraries. The application comes in the form of a click-to-run web-app, which you run on your own device and access through a web browser.",
      "note": "Deploys a Tdarr server with CPU transcoding support.",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://docs.tdarr.io/img/favicon.ico",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Tdarr/docker-stack-server-cpu_node.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "SERVER_IP",
          "label": "IP address of the Tdarr server",
          "default": "127.0.0.1"
        },
        {
          "name": "NODE_NAME",
          "label": "Name of this Tdarr node",
          "default": "tdarrNode"
        },
        {
          "name": "LIBRARY_PATH",
          "label": "Host path to media library",
          "default": "/var/lib/tdarr/library"
        },
        {
          "name": "TRANSCODE_CACHE_PATH",
          "label": "Host path for storing transcoding cache, this must be accessible by all Tdarr nodes and the Tdarr server.",
          "default": "/var/lib/tdarr/transcode_cache"
        }
      ]
    },
    {
      "type": 3,
      "title": "Tdarr Worker Node (GPU Transcoding)",
      "description": "Tdarr is a popular conditional transcoding application for processing large (or small) media libraries. The application comes in the form of a click-to-run web-app, which you run on your own device and access through a web browser.",
      "note": "Deploys a Tdarr worker node with GPU transcoding support.",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://docs.tdarr.io/img/favicon.ico",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Tdarr/docker-stack-worker-gpu_node.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "SERVER_IP",
          "label": "IP address of the Tdarr server",
          "default": "127.0.0.1"
        },
        {
          "name": "NODE_NAME",
          "label": "Name of this Tdarr node",
          "default": "tdarrNode"
        },
        {
          "name": "LIBRARY_PATH",
          "label": "Host path to media library",
          "default": "/var/lib/tdarr/library"
        },
        {
          "name": "TRANSCODE_CACHE_PATH",
          "label": "Host path for storing transcoding cache, this must be accessible by all Tdarr nodes and the Tdarr server.",
          "default": "/var/lib/tdarr/transcode_cache"
        }
      ]
    },
    {
      "type": 3,
      "title": "Tdarr Worker Node (CPU Transcoding)",
      "description": "Tdarr is a popular conditional transcoding application for processing large (or small) media libraries. The application comes in the form of a click-to-run web-app, which you run on your own device and access through a web browser.",
      "note": "Deploys a Tdarr worker node with CPU transcoding support.",
      "categories": [
        "media"
      ],
      "platform": "linux",
      "logo": "https://docs.tdarr.io/img/favicon.ico",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Tdarr/docker-stack-worker-cpu_node.yml"
      },
      "env": [
        {
          "name": "TZ",
          "label": "Timezone Default: Europe/Rome",
          "default": "Europe/Rome"
        },
        {
          "name": "SERVER_IP",
          "label": "IP address of the Tdarr server",
          "default": "127.0.0.1"
        },
        {
          "name": "NODE_NAME",
          "label": "Name of this Tdarr node",
          "default": "tdarrNode"
        },
        {
          "name": "LIBRARY_PATH",
          "label": "Host path to media library",
          "default": "/var/lib/tdarr/library"
        },
        {
          "name": "TRANSCODE_CACHE_PATH",
          "label": "Host path for storing transcoding cache, this must be accessible by all Tdarr nodes and the Tdarr server.",
          "default": "/var/lib/tdarr/transcode_cache"
        }
      ]
    },
    {
      "type": 3,
      "title": "Checkmk",
      "description": "Checkmk is a comprehensive IT monitoring solution that enables system administrators, IT managers, and DevOps teams to identify issues across their entire IT infrastructure (servers, applications, networks, storage, databases) and act quickly to resolve them.",
      "note": "Deploys Checkmk",
      "categories": [
        "infra"
      ],
      "platform": "linux",
      "logo": "https://docs.checkmk.com/assets/images/docs_logo.png",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Checkmk/docker-stack.yml"
      }
    },
    {
      "type": 3,
      "title": "Mealie",
      "description": "Mealie is a self hosted recipe manager and meal planner with a RestAPI backend and a reactive frontend application built in Vue for a pleasant user experience for the whole family.",
      "note": "Deploys Mealie",
      "categories": [
        "Other"
      ],
      "platform": "linux",
      "logo": "https://avatars.githubusercontent.com/u/92342333",
      "repository": {
        "url": "https://github.com/AxelFooley/portainer-app-templates",
        "stackfile": "stacks/Mealie/docker-stack.yml"
      },
      "env": [
        {
          "name": "SMTP_HOST",
          "label": "SMTP server hostname"
        },
        {
          "name": "SMTP_PORT",
          "label": "SMTP server port"
        },
        {
          "name": "SMTP_USER",
          "label": "SMTP server username"
        },
        {
          "name": "SMTP_PASSWORD",
          "label": "SMTP server password"
        },
        {
          "name": "SMTP_FROM_NAME",
          "label": "Name to send emails from"
        },
        {
          "name": "AUTH_STRATEGY",
          "label": "Authentication strategy. Options: TLS, SSL, NONE",
          "default": "TLS"
        },
        {
          "name": "SMTP_FROM_EMAIL",
          "label": "Email address to send emails from"
        }
      ]
    }
  ]
}